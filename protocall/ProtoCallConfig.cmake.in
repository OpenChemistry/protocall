if(NOT TARGET runtime)
  include("@ProtoCall_TARGETS_DIR@/ProtoCallTargets.cmake")
endif()

set(ProtoCall_INCLUDE_DIRS "@ProtoCall_INCLUDE_DIRS@")
set(ProtoCall_LIBRARY_DIR "@ProtoCall_LIBRARY_DIR@")
set(ProtoCall_PROTO_DIR @ProtoCall_PROTO_DIR@)
set(ProtoCall_PLUGIN_EXE @ProtoCall_PLUGIN_EXE@)
set(ProtoCall_CMAKE_DIR @ProtoCall_CMAKE_DIR@)
set(ProtoCall_SOURCE_DIR "@ProtoCall_SOURCE_DIR@")
set(ProtoCall_RUNTIME_SOURCE "@ProtoCall_RUNTIME_SOURCE@")
set(ProtoCall_LIBRARIES protobuf vtkParallelCore)
set(protobuf_DIR @protobuf_DIR@)

macro(protocallc _common_source _service_source _proxy_source _include_dir)
#  if(NOT ARGN)
#    message(SEND_ERROR "Error: build_rpc() called without any proto files")
#    return()
#  endif()

  set(${_include_dir} ${CMAKE_CURRENT_BINARY_DIR}/protoc_output)
  set(${_common_source})
  set(${_service_source})
  set(${_proxy_source})
  set(_proto_files)
  set(_proto_dirs)
  unset(_vtk_imported)
  unset(_vtk_type)
  unset(_void_type)
  foreach(_proto_file ${ARGN})
    get_filename_component(_abs_proto_file ${_proto_file} ABSOLUTE)
    get_filename_component(_proto_file_we ${_proto_file} NAME_WE)
	get_filename_component(_proto_file_path ${_abs_proto_file} PATH)

    set(_src "${CMAKE_CURRENT_BINARY_DIR}/protoc_output/${_proto_file_we}.pb.cc")
    set(_src_rpc "${CMAKE_CURRENT_BINARY_DIR}/protoc_output/${_proto_file_we}_rpc.pb.cc")

    extract_service_names(_services ${_proto_file})
    foreach(_service ${_services})
      list(APPEND ${_service_source} ${CMAKE_CURRENT_BINARY_DIR}/protoc_output/${_service}_Dispatcher.pb.cc)
      list(APPEND ${_proxy_source} ${CMAKE_CURRENT_BINARY_DIR}/protoc_output/${_service}_Proxy.pb.cc)
      list(APPEND ${_proxy_source} ${CMAKE_CURRENT_BINARY_DIR}/protoc_output/${_service}_Handler.pb.cc)
	endforeach()

    list(APPEND ${_common_source} ${_src} ${_src_rpc})
    list(APPEND _proto_files ${_abs_proto_file})
    list(APPEND _proto_dirs ${_proto_file_path})

    # Are we importing any VTK types.
    set(_vtk_regex  "^.*[,( ]+vtk\\\\.vtk.*$")
    regex_exclude_comments(${_abs_proto_file} _vtk ${_vtk_regex})

    if (_vtk)
      set(_vtk_type TRUE)
    endif()

    # Are we using the Void type
    set(_void_regex "^.*[,( ]*Void[,) ]*.*$")
    regex_exclude_comments(${_abs_proto_file} _void ${_void_regex})

    if (_void)
      set(_void_type TRUE)
    endif()

    # Are we importing any external types.
    set(_external_protos)
    extract_external_protos(_external_protos ${_proto_file})
    foreach(_external_proto ${_external_protos})
      list(APPEND ${_common_source} ${CMAKE_CURRENT_BINARY_DIR}/protoc_output/${_external_proto}.pb.cc)
    endforeach()
  endforeach()

  list(APPEND ${_common_source}
    ${CMAKE_CURRENT_BINARY_DIR}/protoc_output/protocall/messages.pb.cc
    ${CMAKE_CURRENT_BINARY_DIR}/protoc_output/protocall.pb.cc)

  set(ProtoCall_IMPORT_VTK_PROTO)
  if (_vtk_type)
    list(APPEND ${_common_source}
      ${CMAKE_CURRENT_BINARY_DIR}/protoc_output/protocall/vtk.pb.cc)
    set(ProtoCall_IMPORT_VTK_PROTO "import public \"protocall/vtk.proto\";")
  endif()

  set(ProtoCall_IMPORT_VOID_PROTO)
  if (_void_type)
    list(APPEND ${_common_source}
      ${CMAKE_CURRENT_BINARY_DIR}/protoc_output/protocall/void.pb.cc)
    set(ProtoCall_IMPORT_VOID_PROTO "import public \"protocall/void.proto\";")
  endif()

  configure_file(${ProtoCall_CMAKE_DIR}/protocall.proto.in
    ${CMAKE_CURRENT_BINARY_DIR}/protocall.proto)

  list(APPEND _proto_dirs ${ProtoCall_PROTO_DIR})
  list(APPEND _proto_dirs ${CMAKE_CURRENT_BINARY_DIR})
  set(_proto_path_args)

  foreach(_dir ${_proto_dirs})
    list(APPEND  _proto_path_args "--proto_path=${_dir}")
  endforeach()

  set(_protoc_output_dir "${CMAKE_CURRENT_BINARY_DIR}/protoc_output")
  get_target_property(_plugin_exe protoc-gen-protocallc LOCATION)

  add_custom_command(
    OUTPUT ${${_common_source}} ${${_service_source}} ${${_proxy_source}}
    COMMAND ${CMAKE_COMMAND} -E make_directory ${_protoc_output_dir}
    COMMAND protoc_compiler
    ARGS --plugin=protoc-gen-protocallc=${_plugin_exe} --protocallc_out=${_protoc_output_dir}
      ${_proto_path_args} ${_proto_files}
    DEPENDS ${_proto_files} ${CMAKE_CURRENT_BINARY_DIR}/proto.timestamp
    COMMENT "Running C++ ProtoCall (protocol buffer) compiler"
    VERBATIM )

   add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/proto.timestamp
     COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_CURRENT_BINARY_DIR}/proto.timestamp
     DEPENDS ${_proto_files}
   )

  # Add runtime source
  foreach(_file ${ProtoCall_RUNTIME_SOURCE})
    list(APPEND ${_common_source} "${ProtoCall_SOURCE_DIR}/${_file}")
  endforeach()

  if (WIN32)
    set_directory_properties(PROPERTIES COMPILE_DEFINITIONS "PROTOBUF_USE_DLLS")
endif()
endmacro()

macro(extract_service_names services file)
  set(_regex "^[ \t]*service[ \t]*([^ \t]*)[ \t]*{[^{]*$")
  file(STRINGS ${file} _lines REGEX ${_regex})

  set(${services})

  foreach(_line ${_lines})
    string(REGEX MATCH ${_regex} _match ${_line})
    list(APPEND ${services} ${CMAKE_MATCH_1})
  endforeach()
endmacro()

macro(extract_external_protos _protos _file)
  set(_regex "^import[\t ]+\"(external[^\\\\.]*).*$") #)\\\\.proto.*$")
  set(${_protos})

  file(STRINGS ${_file} _raw_lines)
  foreach(_line ${_raw_lines})
    string(REGEX MATCH "^(.*)//.*$" _match ${_line})

    if (_match)
      set(_line ${CMAKE_MATCH_1})
    endif()

    string(REGEX MATCH ${_regex} _match ${_line})
    if (_match)
      list(APPEND ${_protos} ${CMAKE_MATCH_1})
    endif()
  endforeach()
endmacro()

macro(regex_exclude_comments _file _lines _regex)
  set(${_lines})
  file(STRINGS ${_file} _raw_lines)

  foreach(_line ${_raw_lines})
    string(REGEX MATCH "^(.*)//.*$" _match "${_line}")

    if (_match)
      set(_line ${CMAKE_MATCH_1})
    endif()

    string(REGEX MATCH ${_regex} _match "${_line}")
    if (_match)
      list(APPEND ${_lines} "${_line}")
    endif()
  endforeach()
endmacro()
